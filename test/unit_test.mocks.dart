// Mocks generated by Mockito 5.4.4 from annotations
// in testing_flutter/test/unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:convert' as _i4;
import 'dart:typed_data' as _i6;

import 'package:http/http.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0 extends _i1.SmartFake implements _i2.Response {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_1 extends _i1.SmartFake
    implements _i2.StreamedResponse {
  _FakeStreamedResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDuration_2 extends _i1.SmartFake implements Duration {
  _FakeDuration_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDateTime_3 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MyMockClient extends _i1.Mock implements _i2.Client {
  MyMockClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i2.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i3.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i3.Future<_i2.Response>);

  @override
  _i3.Future<_i2.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i3.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i3.Future<_i2.Response>);

  @override
  _i3.Future<_i2.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i4.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i3.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response>);

  @override
  _i3.Future<_i2.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i4.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i3.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response>);

  @override
  _i3.Future<_i2.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i4.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i3.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response>);

  @override
  _i3.Future<_i2.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i4.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i3.Future<_i2.Response>.value(_FakeResponse_0(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i3.Future<_i2.Response>);

  @override
  _i3.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i3.Future<String>.value(_i5.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<_i6.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i3.Future<_i6.Uint8List>.value(_i6.Uint8List(0)),
      ) as _i3.Future<_i6.Uint8List>);

  @override
  _i3.Future<_i2.StreamedResponse> send(_i2.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i3.Future<_i2.StreamedResponse>.value(_FakeStreamedResponse_1(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i3.Future<_i2.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [DateTime].
///
/// See the documentation for Mockito's code generation for more information.
class MockDateTime extends _i1.Mock implements DateTime {
  MockDateTime() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isUtc => (super.noSuchMethod(
        Invocation.getter(#isUtc),
        returnValue: false,
      ) as bool);

  @override
  int get millisecondsSinceEpoch => (super.noSuchMethod(
        Invocation.getter(#millisecondsSinceEpoch),
        returnValue: 0,
      ) as int);

  @override
  int get microsecondsSinceEpoch => (super.noSuchMethod(
        Invocation.getter(#microsecondsSinceEpoch),
        returnValue: 0,
      ) as int);

  @override
  String get timeZoneName => (super.noSuchMethod(
        Invocation.getter(#timeZoneName),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#timeZoneName),
        ),
      ) as String);

  @override
  Duration get timeZoneOffset => (super.noSuchMethod(
        Invocation.getter(#timeZoneOffset),
        returnValue: _FakeDuration_2(
          this,
          Invocation.getter(#timeZoneOffset),
        ),
      ) as Duration);

  @override
  int get year => (super.noSuchMethod(
        Invocation.getter(#year),
        returnValue: 0,
      ) as int);

  @override
  int get month => (super.noSuchMethod(
        Invocation.getter(#month),
        returnValue: 0,
      ) as int);

  @override
  int get day => (super.noSuchMethod(
        Invocation.getter(#day),
        returnValue: 0,
      ) as int);

  @override
  int get hour => (super.noSuchMethod(
        Invocation.getter(#hour),
        returnValue: 0,
      ) as int);

  @override
  int get minute => (super.noSuchMethod(
        Invocation.getter(#minute),
        returnValue: 0,
      ) as int);

  @override
  int get second => (super.noSuchMethod(
        Invocation.getter(#second),
        returnValue: 0,
      ) as int);

  @override
  int get millisecond => (super.noSuchMethod(
        Invocation.getter(#millisecond),
        returnValue: 0,
      ) as int);

  @override
  int get microsecond => (super.noSuchMethod(
        Invocation.getter(#microsecond),
        returnValue: 0,
      ) as int);

  @override
  int get weekday => (super.noSuchMethod(
        Invocation.getter(#weekday),
        returnValue: 0,
      ) as int);

  @override
  bool isBefore(DateTime? other) => (super.noSuchMethod(
        Invocation.method(
          #isBefore,
          [other],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isAfter(DateTime? other) => (super.noSuchMethod(
        Invocation.method(
          #isAfter,
          [other],
        ),
        returnValue: false,
      ) as bool);

  @override
  bool isAtSameMomentAs(DateTime? other) => (super.noSuchMethod(
        Invocation.method(
          #isAtSameMomentAs,
          [other],
        ),
        returnValue: false,
      ) as bool);

  @override
  int compareTo(DateTime? other) => (super.noSuchMethod(
        Invocation.method(
          #compareTo,
          [other],
        ),
        returnValue: 0,
      ) as int);

  @override
  DateTime toLocal() => (super.noSuchMethod(
        Invocation.method(
          #toLocal,
          [],
        ),
        returnValue: _FakeDateTime_3(
          this,
          Invocation.method(
            #toLocal,
            [],
          ),
        ),
      ) as DateTime);

  @override
  DateTime toUtc() => (super.noSuchMethod(
        Invocation.method(
          #toUtc,
          [],
        ),
        returnValue: _FakeDateTime_3(
          this,
          Invocation.method(
            #toUtc,
            [],
          ),
        ),
      ) as DateTime);

  @override
  String toIso8601String() => (super.noSuchMethod(
        Invocation.method(
          #toIso8601String,
          [],
        ),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.method(
            #toIso8601String,
            [],
          ),
        ),
      ) as String);

  @override
  DateTime add(Duration? duration) => (super.noSuchMethod(
        Invocation.method(
          #add,
          [duration],
        ),
        returnValue: _FakeDateTime_3(
          this,
          Invocation.method(
            #add,
            [duration],
          ),
        ),
      ) as DateTime);

  @override
  DateTime subtract(Duration? duration) => (super.noSuchMethod(
        Invocation.method(
          #subtract,
          [duration],
        ),
        returnValue: _FakeDateTime_3(
          this,
          Invocation.method(
            #subtract,
            [duration],
          ),
        ),
      ) as DateTime);

  @override
  Duration difference(DateTime? other) => (super.noSuchMethod(
        Invocation.method(
          #difference,
          [other],
        ),
        returnValue: _FakeDuration_2(
          this,
          Invocation.method(
            #difference,
            [other],
          ),
        ),
      ) as Duration);
}
